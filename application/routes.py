from application import app, db
from flask import render_template, flash, request, redirect, url_for, abort, jsonify
from flask_login import login_user, current_user, logout_user, login_required
from application.forms import (
    LoginForm,
    PatCreateForm,
    PatSearchForm,
    PatUpdateForm,
    PatDelForm,
    IssueMedicineForm,
)
from application.models import (
    User,
    Patient,
    Medicine,
    Diagnostic,
    DiagsIssue,
    MedsIssue,
    State,
    City,
)
from application.schema import (
    users_schema,
    patients_schema,
    medicines_schema,
    diagnostics_schema,
)
from passlib.hash import sha256_crypt
from datetime import datetime


@app.route('/', methods=['GET'])
def login():
    if current_user.is_authenticated:
        return redirect(url_for('home'))
    form = LoginForm()
    return render_template('login.html', title="Login", form=form)

#Route for the home page after logging in
@app.route('/home', methods=['GET', 'POST'])
def home():
    if request.method == 'GET' and current_user.is_authenticated:
        if current_user.user_login_id == 'reception':
            return render_template('home.html', title="Home", reception=True)
        elif current_user.user_login_id == 'pharmacy':
            return render_template('home.html', title="Home", pharmacy=True)
        elif current_user.user_login_id == 'diagnosis':
            return render_template('home.html', title="Home", diagnostics=True)

    form = LoginForm()
    if form.validate_on_submit():
        username = request.form.get('username')
        password = request.form.get('password')
        user = User.query.filter_by(user_login_id=username).first()
        if user and sha256_crypt.verify(password, user.password):
            login_user(user, remember=True)
            if username == 'reception':
                flash('Welcome Receptionist', 'success')
                return render_template('home.html', title="Home", reception=True)
            elif username == 'pharmacy':
                flash('Welcome Pharmacist', 'success')
                return render_template('home.html', title="Home", pharmacy=True)
            elif username == 'diagnosis':
                flash('Welcome Diagnostician', 'success')
                return render_template('home.html', title="Home", diagnostics=True)

    flash('Please Enter Proper Credentials', 'danger')
    return redirect(url_for('login'))
    # return render_template('home.html', title="Home")


@app.route('/logout')
@login_required
def logout():
    logout_user()
    flash("You are successfully logged out!!", "success")
    return redirect(url_for('login'))


# ********************** Creation of Patient ***************************************
@app.route('/pat_create', methods=['GET', 'POST'])
@login_required
def pat_create():
    if not (current_user.is_authenticated and current_user.user_login_id == 'reception'):
        return redirect(url_for('home'))
    form = PatCreateForm()

    # selecting all states in D.B
    form.state.choices = [(state.stateid, state.statename) for state in State.query.all()]

    # valiating and checking if Request is POST
    if form.validate_on_submit():

        # Querying through the table to find match with 'ws_ssn'
        pat = Patient.query.filter_by(ws_ssn = form.ws_ssn.data).first()
        if pat:
            flash('Sorry that SSN ID already exists', 'danger')
        else:
            # 'ws_pat_id' is not added since its auto generated by the table
            statedata = State.query.filter_by(stateid = form.state.data).first()
            # print(form.city.data) None
            entry = Patient(
                ws_ssn          =   form.ws_ssn.data,
                ws_pat_name     =   form.ws_pat_name.data,
                ws_age          =   form.ws_age.data,
                ws_doj          =   form.ws_doj.data,
                ws_rtype        =   form.ws_rtype.data,
                ws_adrs         =   form.ws_adrs.data,
                patient_state   =   statedata.statename,
                patient_city    =   form.city.data,
                patient_status   =   'Active' )
            db.session.add(entry)
            db.session.commit()
            flash('Patient creation initiated successfully', 'success')
            return redirect(url_for('home'))

    return render_template("pat_create.html", reception=True, pat_create=True, title="Create Patient", form=form)

# for changing the state select field
@app.route('/city/<state>', methods=['GET', 'POST'])
def city(state):
    form = PatCreateForm()
    cities = City.query.filter_by(stateid = state).all()

    cityArray = []

    for city in cities:
        cityObj = {}
        cityObj['id'] = city.stateid
        cityObj['name'] = city.cityname
        cityArray.append(cityObj)

    return jsonify({ 'cities': cityArray })



# ******************************* View All patients *************************
@app.route('/pat_view')
@login_required
def pat_view():
    if not (current_user.is_authenticated and current_user.user_login_id == 'reception'):
        return redirect(url_for('home'))
    data = Patient.query.all()
    return render_template("pat_view.html", reception=True, title="View Patients", pat_view=True, data=data)


# ***************************** Search Patient **************************
@app.route('/pat_search/<string:typ>', methods=['GET', 'POST'])
@login_required
def pat_search(typ):
    if not (current_user.is_authenticated and current_user.user_login_id == 'reception'):
        return redirect(url_for('home'))
    form = PatSearchForm()

    if form.validate_on_submit():
        DbPat = Patient.query.filter_by(ws_pat_id=form.ws_pat_id.data).first()

        if typ == 'update' and DbPat:
            flash("Patient found", "success")
            return redirect(url_for('pat_update', p_id = form.ws_pat_id.data))
        elif typ == 'view' and DbPat:
            flash("Patient found", "success")
            return redirect(url_for('pat_searchView', p_id = form.ws_pat_id.data))
        elif typ == 'delete' and DbPat:
            flash("Patient found", "success")
            return redirect(url_for('pat_del', p_id = form.ws_pat_id.data))
        else:
            flash('Sorry that Patient does not exists !', 'danger')
    return render_template("pat_search.html", reception=True, title="Search Patient", pat_search=True, form=form, typ=typ)

# ***************************** View a Patient **************************
@app.route('/pat_searchView/<p_id>/')
@login_required
def pat_searchView(p_id):
    if not (current_user.is_authenticated and current_user.user_login_id == 'reception'):
        return redirect(url_for('home'))

    DbPat = Patient.query.filter_by(ws_pat_id=p_id).first()
    return render_template("pat_searchView.html", reception=True, title="Patient Viewer", pat_searchView=True, DbPat=DbPat)

# ***************************** Update Patient **************************
@app.route('/update_pat/<p_id>',methods=['GET', 'POST'])
@login_required
def pat_update(p_id):
    if not (current_user.is_authenticated and current_user.user_login_id == 'reception'):
        return redirect(url_for('home'))
    form = PatUpdateForm()

    form.state.choices = [(state.stateid, state.statename) for state in State.query.all()]

    # Patient ssn id from D.B that needs to be updated
    DbPat = Patient.query.filter_by(ws_pat_id=p_id).first()

    if request.method == 'POST':
        navigate = request.form.get('back')
        if navigate == 'back':
            return redirect(url_for('home'))
        if form.validate_on_submit():
            statedata = State.query.filter_by(stateid=form.state.data).first()
            updated = Patient.query.filter_by(ws_pat_id=DbPat.ws_pat_id).update({
                Patient.ws_pat_id       : DbPat.ws_pat_id,
                Patient.ws_pat_name     : form.ws_pat_name.data,
                Patient.ws_age          : form.ws_age.data,
                Patient.ws_doj          : form.ws_doj.data,
                Patient.ws_rtype        : form.ws_rtype.data,
                Patient.ws_adrs         : form.ws_adrs.data,
                Patient.patient_state   : statedata.statename,
                Patient.patient_city    : form.city.data })
            db.session.commit()
            flash("Patient update initiated successfully", "success")
            return redirect(url_for('home'))

    return render_template("pat_update.html", title="Update Patient", reception=True, pat_update=True, form=form, DbPat=DbPat)

# ***************************** Delete Patient **************************
@app.route("/pat_del/<p_id>", methods=['GET', 'POST'])
@login_required
def pat_del(p_id):
    if not (current_user.is_authenticated and current_user.user_login_id == 'reception'):
        return redirect(url_for('home'))
    DbPat = Patient.query.filter_by(ws_pat_id=p_id).first()
    form = PatDelForm()
    if request.method == 'POST':
        db.session.delete(DbPat)
        db.session.commit()
        flash('Patient deletion initiated successfully', 'success')
        return redirect(url_for('home'))

    return render_template("pat_del.html", reception=True, title="Delete Patient", pat_del=True, DbPat=DbPat, form=form)


# ***************************** Patient Bill Search **************************
@app.route('/pat_bill_search/<string:typ>', methods=['GET', 'POST'])
@login_required
def pat_bill_search(typ):
    if not (current_user.is_authenticated and current_user.user_login_id == 'reception'):
        return redirect(url_for('home'))
    form = PatSearchForm()

    if form.validate_on_submit():
        DbPat = Patient.query.filter_by(ws_pat_id=form.ws_pat_id.data).first()
        if not DbPat:
            flash("Please enter a valid Patient Id!", "danger")
            return redirect(url_for('home'))
        if typ == 'bill':
            if DbPat.patient_status == 'Discharged':
                flash("Patient already discharged, Thank you!", "success")
                return redirect(url_for('home'))
            else:
                flash("Patient Found!", "success")
                return redirect(url_for('pat_bill_total', idx = form.ws_pat_id.data))

        else:
            flash('Sorry that Patient does not exists !', 'danger')

    return render_template("pat_bill_search.html", reception=True, title="Patient Billing", pat_bill=True, form=form, typ=typ)


# ***************************** Patient Total Bill **************************
@app.route('/pat_bill_total/<int:idx>', methods=['GET', 'POST'])
@login_required
def pat_bill_total(idx):
    if not (current_user.is_authenticated and current_user.user_login_id == 'reception'):
        return redirect(url_for('home'))
    patient = Patient.query.filter_by(ws_pat_id=idx).first()

    if request.method == 'POST':
        confirm = request.form.get('confirm')
        if confirm == 'True':
            patient.patient_status = 'Discharged'
            db.session.commit()
            flash('Patient Billing Successful', 'success')
            return redirect(url_for('home'))

    # total days and cost of bed
    discharge = datetime.utcnow().date()
    totalDays = (discharge - patient.ws_doj).days
    totalBedCost = 0
    if "General" in patient.ws_rtype:
        totalBedCost = totalDays * 2000
    elif "Semi" in patient.ws_rtype:
        totalBedCost = totalDays * 4000
    elif "Single" in patient.ws_rtype:
        totalBedCost = totalDays * 8000
    else:
        totalBedCost = None

    meds    = MedsIssue.query.filter_by(ws_pat_id = patient.ws_pat_id).all()
    diags   = DiagsIssue.query.filter_by(ws_pat_id = patient.ws_pat_id).all()

    # Table 2  to show
    t2 = []
    totalMed = 0
    for m in meds:
        amt = (m.issueMed.ws_med_rate) * (m.qty_issued)
        dict_lst = { "name"     : m.issueMed.ws_med_name,
                     "quantity" : m.qty_issued,
                     "rate"     : m.issueMed.ws_med_rate,
                     "amount"   : amt }
        t2.append(dict_lst)

        totalMed += amt

    #creating a dict of dict to check duplicate diagnostic since ther is no column for amount/number of
    # times a diagnostic is conducted.
    diag_dict = {}
    for dname in diags:
        name =  dname.issueDiag.ws_diagn
        if name in diag_dict:
            diag_dict[name]['qty'] += 1
        else:
            diag_dict[name] = {}
            diag_dict[name]['rate'] = dname.issueDiag.ws_test_charge
            diag_dict[name]['qty'] = 1

    # Table 3  to show
    t3 = []
    totalDiag = 0
    for name in diag_dict:
        amt = diag_dict[name]['rate'] * diag_dict[name]['qty']
        dict_lst = { "name"     : name,
                     "amount"   : amt }
        t3.append(dict_lst)

        totalDiag += amt

    # Table 1  to show
    t1 = { "id"         : patient.ws_pat_id,
           "ssn"        : patient.ws_ssn,
           "name"       : patient.ws_pat_name,
           "age"        : patient.ws_age,
           "address"    : patient.ws_adrs,
           "doj"        : patient.ws_doj.strftime("%d %B, %Y"),
           "discharge"  : discharge.strftime("%d %B, %Y"),
           "bed"        : patient.ws_rtype,
           "days"       : totalDays,
           "bedCost"    : "{:.2f}".format(totalBedCost),
           "medCost"    : "{:.2f}".format(totalMed),
           "diagCost"   : "{:.2f}".format(totalDiag),
           "GrandTotal" : "{:.2f}".format(totalBedCost + totalMed + totalDiag)
           }
    return render_template("pat_bill_total.html",
                           reception=True,
                           title="Patient Billing",
                           pat_bill=True,
                           t1=t1,
                           t2=t2,
                           t3=t3)


############################################################################

# *************************** Pharmacy **************************************

############################################################################

# ***************************** Pharmacy view medicines **************************
@app.route('/medicines')
def medicines():
    mymedicines = Medicine.query.all()
    result = medicines_schema.dump(mymedicines)
    return jsonify(result)


# ***************************** Pharmacy Search Patient **************************
@app.route('/pat_medi_search/<string:typ>', methods=['GET', 'POST'])
@login_required
def pat_medi_search(typ):
    if not (current_user.is_authenticated and current_user.user_login_id == 'pharmacy'):
        return redirect(url_for('home'))
    form = PatSearchForm()

    if form.validate_on_submit():
        DbPat = Patient.query.filter_by(ws_pat_id=form.ws_pat_id.data).first()

        if typ == 'medi' and DbPat:
            if DbPat.patient_status == 'Discharged':
                flash('Patient has been discharged', 'danger')
            else:
                flash("Patient found", "success")
                return redirect(url_for('pat_medi_issue', idx=form.ws_pat_id.data))

        else:
            flash('Sorry that Patient does not exists !', 'danger')

    return render_template("pat_medi_search.html", 
                            title="Search Patient", 
                            pat_medi_search=True, 
                            pharmacy=True, 
                            form=form, 
                            typ=typ)


# ***************************** Pharmacy issue medicine page **************************
@app.route('/pat_medi_issue/<int:idx>', methods=['GET', 'POST'])
@login_required
def pat_medi_issue(idx):
    if not (current_user.is_authenticated and current_user.user_login_id == 'pharmacy'):
        return redirect(url_for('home'))

    form = IssueMedicineForm()
    # selecting all meds in D.B
    form.selectMeds.choices = [(med.ws_med_id, med.ws_med_name) for med in Medicine.query.all()]
    
    patient = Patient.query.filter_by(ws_pat_id=idx).first() #for table 1
    meds = MedsIssue.query.filter_by(ws_pat_id = idx) #for table 2
    medLst = [medId.ws_med_id for medId in meds]
    
    t2 = []
    for m in meds:
        m_dict = { "name"  : m.issueMed.ws_med_name,
                    "qty"  : m.qty_issued,
                    "rate" : "{:.2f}".format(m.issueMed.ws_med_rate),
                    "amt"  : "{:.2f}".format(m.qty_issued * m.issueMed.ws_med_rate )}
        t2.append(m_dict)

    if request.method == "POST":
        selectedMed = request.form.get('selectMeds')
        selectedQty = request.form.get('qtyMeds')
        medDB = Medicine.query.filter_by(ws_med_id=selectedMed).first()
        if selectedMed != 1 and medDB.ws_qty_avbl >= int(selectedQty):

            if int(selectedMed) in medLst:
                update1 = MedsIssue.query.filter_by(ws_med_id=int(selectedMed)).update({
                    MedsIssue.qty_issued: MedsIssue.qty_issued + int(selectedQty)})
                medDB.ws_qty_avbl = medDB.ws_qty_avbl - int(selectedQty)
                db.session.commit()
            else:
                entry = MedsIssue(
                    ws_pat_id=patient.ws_pat_id,
                    ws_med_id=selectedMed,
                    qty_issued=selectedQty
                )
                db.session.add(entry)
                db.session.commit()

            flash("Medicine has been issued for the patient", 'success')

            return redirect(url_for("home"))

    return render_template("pat_medi_issue.html", 
                            patient=patient, 
                            medicine = t2, 
                            form=form,
                            title="Pharmacy", 
                            pat_medi_issue=True,
                            pharmacy=True)


@app.route('/medic/<issue>', methods=['GET', 'POST'])
def medic(issue):
    meds = Medicine.query.filter_by(ws_med_id = issue).first()

    medObj = {}
    medObj['id']    = meds.ws_med_id
    medObj['name']  = meds.ws_med_name
    # medObj['qty']   = meds.ws_qty_avbl
    medObj['rate']  = meds.ws_med_rate 

    return jsonify({ 'meds': medObj })



############################################################################

# ******************************** Diagnostic *******************************

############################################################################

@app.route("/add-diagnostics", methods=["GET", "POST"])
@login_required
def addDiagnostics():
    if not (current_user.is_authenticated and current_user.user_login_id == 'diagnosis'):
        return redirect(url_for('home'))
    if request.method == "POST":
        patient_id = request.form.get("patient_id")
        patient = Patient.query.filter_by(ws_pat_id=patient_id).first()

        if not patient:
            flash("Patient ID does not exist. Enter corrent Patient ID", "danger")
            return render_template(
                "add-diagnostics.html",
                title="Diagnostics",
                patient=None,
                diagnostic=None,
                diag_issued=None,
                diagnostics=True,
                add_diag=True,
            )
        elif patient.patient_status == 'Discharged':
            flash("Patient has been discharged!!", "danger")
            return render_template(
                "add-diagnostics.html",
                title="Diagnostics",
                patient=None,
                diagnostic=None,
                diag_issued=None,
                diagnostics=True,
                add_diag=True,
            )
        diagnostic = Diagnostic.query.all()
        diags = {}

        for diag_issue in patient.diagnostics:
            for diag in diagnostic:
                if diag_issue.ws_test_id == diag.ws_test_id:
                    diags[diag.ws_diagn] = diag.ws_test_charge

        # print(diags)

        if patient:
            return render_template(
                "add-diagnostics.html",
                title="Diagnostics",
                patient=patient,
                diagnostic=diagnostic,
                diag_issued=diags,
                diagnostics=True,
                add_diag=True,
            )

    else:
        return render_template(
            "add-diagnostics.html",
            title="Diagnostics",
            patient=None,
            diagnostic=None,
            diag_issued=None,
            diagnostics=True,
            add_diag=True,
        )


@app.route("/update-success", methods=["GET", "POST"])
@login_required
def updateSuccess():
    if not (current_user.is_authenticated and current_user.user_login_id == 'diagnosis'):
        return redirect(url_for('home'))
    if request.method == "POST":
        patient_id = request.form.get("patient_id")
        print(patient_id)
        test_id = request.form.get("test_id")
        print(test_id)

        patient = Patient.query.filter_by(ws_pat_id=patient_id).first()
        diagnostic = Diagnostic.query.filter_by(ws_test_id=test_id).first()

        diag_issue = DiagsIssue(issueDiag=diagnostic, patient=patient)
        db.session.add(diag_issue)
        db.session.commit()

        flash("Diagnostics added successfully", "success")
        return render_template("update-success.html", diagnostics=True, diag=True, title='Issue Diagnosis')
    else:
        return redirect(url_for("addDiagnostics"))



# ****************************For the Viewing Patient Details section of both the Pharmacy and Diagnostics sections********************
@app.route('/pat_search_diag_pha/<mode>', methods=['GET', 'POST'])
@login_required
def pat_search_diag_pha(mode):
    if not (current_user.is_authenticated and current_user.user_login_id in ['pharmacy', 'diagnosis']):
        return redirect(url_for('home'))

    form = PatSearchForm()

    if form.validate_on_submit():
        DbPat = Patient.query.filter_by(ws_pat_id=form.ws_pat_id.data).first()
        if DbPat:
            flash("Patient found", "success")
            return redirect(url_for('pat_searchViewPD', mode=mode, p_id=form.ws_pat_id.data))
        else:
            flash('Sorry that Patient does not exists !', 'danger')

    if mode == 'pharmacy':
        return render_template("pat_search_diag_pha.html", pharmacy=True, title='Search Patient', ps_pha=True, form=form)
    elif mode == 'diagnostics':
        return render_template("pat_search_diag_pha.html", diagnostics=True, title='Search Patient', ps_diag=True, form=form)


@app.route('/pat_searchViewPD/<mode>/<p_id>')
@login_required
def pat_searchViewPD(mode, p_id):
    if not (current_user.is_authenticated and current_user.user_login_id in ['pharmacy', 'diagnosis']):
        return redirect(url_for('home'))
    DbPat = Patient.query.filter_by(ws_pat_id=p_id).first()
    if mode == 'pharmacy':
        return render_template("pat_searchViewPD.html", title="View Patient", pharmacy=True, DbPat=DbPat)
    elif mode == 'diagnostics':
        return render_template("pat_searchViewPD.html", title="View Patient", diagnostics=True, DbPat=DbPat)
